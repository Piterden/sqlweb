{"version":3,"file":"sqljs.js","sourceRoot":"","sources":["../code/license.ts","../code/error.ts","../code/query.ts","../code/column.ts","../code/create.ts","../code/insert.ts","../code/bulk_insert.ts","../code/where.ts","../code/select.ts","../code/instance.ts","../code/model/map.ts"],"names":[],"mappings":"AAAA;;;;GAIG;ACJH,IAAU,KAAK,CAuDd;AAvDD,WAAU,KAAK;IACX,IAAY,MAIX;IAJD,WAAY,MAAM;QACd,+CAAqC,CAAA;QACrC,+CAAqC,CAAA;QACrC,iCAAuB,CAAA;IAC3B,CAAC,EAJW,MAAM,GAAN,YAAM,KAAN,YAAM,QAIjB;IAOD;QAII,eAAY,IAAY,EAAE,IAAgB;YAAhB,qBAAA,EAAA,WAAgB;YAKnC,UAAK,GAAG;gBACX,MAAM,IAAI,CAAC,GAAG,EAAE,CAAC;YACrB,CAAC,CAAC;YAEF,UAAK,GAAG,UAAU,MAAuB;gBAAvB,uBAAA,EAAA,cAAuB;gBACrC,IAAI,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBAC3B,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;oBACT,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBAC5B,CAAC;gBACD,IAAI,CAAC,CAAC;oBACF,OAAO,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;gBAC7B,CAAC;YACL,CAAC,CAAC;YAEM,QAAG,GAAG;gBACV,IAAI,SAAS,GAAG;oBACZ,KAAK,EAAE,IAAI,CAAC,KAAK;oBACjB,QAAQ,EAAE,IAAI,CAAC,QAAQ;iBAChB,CAAC;gBAEZ,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;oBACjB,KAAK,MAAM,CAAC,YAAY;wBACpB,SAAS,CAAC,QAAQ,GAAG,mCAAmC,CAAC;wBACzD,KAAK,CAAC;oBACV,KAAK,MAAM,CAAC,gBAAgB;wBACxB,SAAS,CAAC,QAAQ,GAAG,wBAAwB,CAAC;wBAC9C,KAAK,CAAC;oBACV;wBACI,SAAS,CAAC,QAAQ,GAAG,+BAA+B,CAAC;wBACrD,KAAK,CAAC;gBACd,CAAC;gBACD,MAAM,CAAC,SAAS,CAAC;YACrB,CAAC,CAAC;YApCE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;YAClB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QACtB,CAAC;QAmCL,YAAC;IAAD,CAAC,AA1CD,IA0CC;IA1CY,WAAK,QA0CjB,CAAA;AACL,CAAC,EAvDS,KAAK,KAAL,KAAK,QAuDd;ACvDD,IAAU,KAAK,CAsEd;AAtED,WAAU,KAAK;IACX;QAKI,eAAY,GAAW;YAHvB,UAAK,GAAW,EAAE,CAAC;YASnB,oBAAe,GAAG,UAAU,IAAI;gBAC5B,IAAI,YAAY,GAAG,EAAE,CAAC;gBACtB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAA,OAAO;oBACtB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBAChD,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBAC/B,CAAC;gBACL,CAAC,CAAC,CAAC;gBACH,MAAM,CAAC,YAAY,CAAC;YACxB,CAAC,CAAC;YAEF,kBAAa,GAAG;gBACZ,IAAI,IAAI,GAAG,EAAE,CAAC;gBACd,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,UAAA,OAAO;oBAC7B,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBAC5B,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBACvB,CAAC;gBACL,CAAC,CAAC,CAAC;gBACH,MAAM,CAAC,IAAI,CAAC;YAChB,CAAC,CAAC;YAEF,gBAAW,GAAG,UAAU,GAAG;gBACvB,EAAE,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBACxB,IAAI,cAAc,GAAG,KAAK,CAAC;oBAC3B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;wBAC1D,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;4BAC3C,cAAc,GAAG,IAAI,CAAC;4BACtB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;wBAChC,CAAC;oBACL,CAAC;oBACD,EAAE,CAAC,CAAC,cAAc,KAAK,KAAK,CAAC,CAAC,CAAC;wBAC3B,OAAO,CAAC,KAAK,CAAC,6BAA6B,CAAC,CAAC;oBACjD,CAAC;gBACL,CAAC;gBACD,IAAI,CAAC,CAAC;oBACF,MAAM,CAAC,GAAG,CAAC;gBACf,CAAC;YACL,CAAC,CAAC;YAEF,QAAG,GAAG,UAAU,GAAG,EAAE,KAAK;gBACtB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,MAAA,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC;YAC/C,CAAC,CAAC;YAEF,YAAO,GAAG,UAAU,QAAgB;gBAChC,QAAQ,CAAC,OAAO,CAAC,UAAU,IAAI;oBAC3B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,MAAA,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC3D,CAAC,EAAE,IAAI,CAAC,CAAC;YACb,CAAC,CAAC;YAEM,eAAU,GAAG;gBACjB,IAAI,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;oBACvE,OAAO,CAAC,oBAAoB,EAAE,OAAO,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACtD,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,UAAU,IAAI;oBACrC,MAAM,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACjC,CAAC,CAAC,CAAC;gBACH,sCAAsC;YAC1C,CAAC,CAAC;YA5DE,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC,OAAO,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC;YACpD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;YACtC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;QACnD,CAAC;QA2DL,YAAC;IAAD,CAAC,AApED,IAoEC;IApEY,WAAK,QAoEjB,CAAA;AACL,CAAC,EAtES,KAAK,KAAL,KAAK,QAsEd;ACtED,IAAU,KAAK,CA0Ed;AA1ED,WAAU,KAAK;IACX;QAGI,gBAAY,GAAU;YADtB,oBAAe,GAAW,CAAC,CAAC;YAK5B,qBAAgB,GAAG;gBACf,IAAM,cAAc,GAAG;oBACnB,EAAE,KAAK,EAAE,YAAY,EAAE,KAAK,EAAE,MAAM,EAAE;oBACtC,EAAE,KAAK,EAAE,YAAY,EAAE,KAAK,EAAE,MAAM,EAAE;oBACtC,EAAE,KAAK,EAAE,YAAY,EAAE,KAAK,EAAE,MAAM,EAAE;oBACtC,EAAE,KAAK,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE;oBACnC,EAAE,KAAK,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE;oBACnC,EAAE,KAAK,EAAE,eAAe,EAAE,KAAK,EAAE,MAAM,EAAE;oBACzC,EAAE,KAAK,EAAE,eAAe,EAAE,KAAK,EAAE,MAAM,EAAE;oBACzC,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE;oBAClC,EAAE,KAAK,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE;oBACnC,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE;oBAClC,EAAE,KAAK,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE;oBACnC,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE;oBAClC,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE;iBACrC,CAAC;gBACF,MAAM,CAAC,cAAc,CAAC;YAC1B,CAAC,CAAC;YAEF,aAAQ,GAAG;gBACP,IAAI,KAAK,GAAW;oBAChB,yDAAyD;oBACzD,IAAI,EAAE,IAAI,CAAC,OAAO,EAAE;iBACvB,CAAC;gBACF,IAAM,QAAQ,GAAG,CAAC,aAAa,EAAE,IAAI,EAAE,YAAY,EAAE,UAAU,EAAE,SAAS;oBACtE,eAAe,EAAE,gBAAgB,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;gBACrG,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,eAAe,EAAE,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,GAAG,MAAM,GAAG,CAAC;oBACvF,IAAI,iBAAiB,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC;oBACpF,EAAE,CAAC,CAAC,iBAAiB,IAAI,CAAC,CAAC,CAAC,CAAC;wBACzB,IAAM,cAAc,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;wBAC/C,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;wBACzB,KAAK,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC,KAAK,CAAC;4BAC1C,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC,KAAK,CAAC,CAAC;wBAC3D,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC;oBAC7B,CAAC;oBACD,CAAC,EAAE,CAAC;gBACR,CAAC;gBACD,IAAM,SAAS,GAAG,CAAC,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;gBAC5D,GAAG,CAAC,CAAC,IAAI,IAAI,IAAI,KAAK,CAAC,CAAC,CAAC;oBACrB,EAAE,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBAC/B,KAAK,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;oBAC7B,CAAC;gBACL,CAAC;gBACD,MAAM,CAAC,KAAK,CAAC;YACjB,CAAC,CAAC;YAEM,aAAQ,GAAG,UAAU,IAAI;gBAC7B,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;oBACX,KAAK,MAAM;wBACP,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;wBAC7D,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;oBAC5C,KAAK,MAAM;wBACP,MAAM,CAAC,IAAI,CAAC;oBAChB,QAAQ;gBACZ,CAAC;YACL,CAAC,CAAC;YA1DE,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC;QACtB,CAAC;QA2DO,wBAAO,GAAf;YACI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;gBACzE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;gBAC3E,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YACnD,8DAA8D;YAC9D,6BAA6B;YAC7B,qFAAqF;QACzF,CAAC;QACL,aAAC;IAAD,CAAC,AAxED,IAwEC;IAxEY,YAAM,SAwElB,CAAA;AACL,CAAC,EA1ES,KAAK,KAAL,KAAK,QA0Ed;AC1ED,IAAU,KAAK,CAiHd;AAjHD,WAAU,KAAK;IACX;QAGI,gBAAY,GAAU;YADtB,oBAAe,GAAW,CAAC,CAAC;YAK5B,UAAK,GAAG;gBACJ,IAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBAClD,IAAI,QAAQ,EAAE,MAAM,GAAG,EAAE,CAAC;gBAC1B,OAAO,CAAC,OAAO,CAAC,UAAU,IAAI;oBAC1B,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;wBAClB,IAAI,KAAK,GAAG,IAAI,MAAA,KAAK,CAAC,IAAI,CAAC,CAAC;wBAC5B,IAAI,IAAI,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC;wBACjC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;4BAClB,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;4BAC/C,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gCAChC,MAAM,CAAC,OAAO,CAAC,UAAC,KAAK;oCACjB,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;gCACxC,CAAC,CAAC,CAAC;4BACP,CAAC;wBACL,CAAC;wBACD,EAAE,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;4BACzC,MAAM,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;wBAC9C,CAAC;wBACD,IAAI,CAAC,CAAC;4BACF,QAAQ,GAAG,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC;wBAC5C,CAAC;oBACL,CAAC;gBACL,CAAC,EAAE,IAAI,CAAC,CAAC;gBACT,QAAQ,CAAC,MAAM,GAAG,MAAM,CAAC;gBACzB,MAAM,CAAC,QAAQ,CAAC;YACpB,CAAC,CAAC;YAEM,qBAAgB,GAAG;gBACvB,IAAM,cAAc,GAAG;oBACnB,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE;oBACnC,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE;oBACnC,EAAE,KAAK,EAAE,SAAS,EAAE,KAAK,EAAE,YAAY,EAAE;iBAC5C,CAAC;gBACF,MAAM,CAAC,cAAc,CAAC;YAC1B,CAAC,CAAC;YAEM,0BAAqB,GAAG;gBAC5B,IAAI,KAAK,GAAG,CAAC,CAAC;gBACd,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,eAAe,EAAE,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,EACrE,CAAC,CAAC,GAAG,CAAC,IAAI,KAAK,GAAG,MAAM,CAAC,EAAE,KAAK,EAAE,EAAE,CAAC;oBACrC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;wBACxC,CAAC,EAAE,CAAC;oBACR,CAAC;gBACL,CAAC;gBACD,MAAM,CAAC,KAAK,CAAC;YACjB,CAAC,CAAC;YAEM,eAAU,GAAG;gBACjB,IAAI,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,qBAAqB,EAAE,CAAC;oBAC1E,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,EAC/B,OAAO,GAAG,EAAE,CAAC;gBACjB,YAAY,CAAC,OAAO,CAAC,UAAU,IAAY;oBACvC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;wBAClB,IAAM,KAAK,GAAG,IAAI,MAAA,KAAK,CAAC,IAAI,CAAC,CAAC;wBAC9B,OAAO,CAAC,IAAI,CAAC,IAAI,MAAA,MAAM,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;oBAC/C,CAAC;gBACL,CAAC,CAAC,CAAC;gBACH,MAAM,CAAC,OAAO,CAAC;YACnB,CAAC,CAAC;YAEM,aAAQ,GAAG,UAAU,IAAI;gBAC7B,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;oBACX,KAAK,SAAS;wBACV,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;oBAC1B,KAAK,MAAM;wBACP,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;wBAC7D,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;oBAC5C,KAAK,YAAY;wBACb,IAAI,KAAK,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;wBAC9B,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC;wBACvD,MAAM,CAAC,KAAK,CAAC;oBACjB,QAAQ;gBACZ,CAAC;YACL,CAAC,CAAC;YAYM,aAAQ,GAAG;gBACf,IAAI,KAAK,GAAW,EAAE,CAAC;gBACvB,IAAM,QAAQ,GAAG,CAAC,UAAU,EAAE,OAAO,EAAE,GAAG,CAAC,CAAC;gBAE5C,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,eAAe,EAAE,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,GAAG,MAAM,GAAG,CAAC;oBACvF,IAAI,iBAAiB,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC;oBACpF,EAAE,CAAC,CAAC,iBAAiB,IAAI,CAAC,CAAC,CAAC,CAAC;wBACzB,IAAM,cAAc,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;wBAC/C,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;wBACzB,KAAK,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC,KAAK,CAAC;4BAC1C,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC,KAAK,CAAC,CAAC;wBAC3D,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC;oBAC7B,CAAC;oBACD,CAAC,EAAE,CAAC;gBACR,CAAC;gBACD,MAAM,CAAC,KAAK,CAAC;YAEjB,CAAC,CAAC;YAzGE,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC;QACtB,CAAC;QA6EO,wBAAO,GAAf;YACI,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;YAC7D,MAAM,CAAC,IAAI,CAAC,eAAe,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM;gBAC7D,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;gBACtE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;YACtF,kDAAkD;YAClD,4BAA4B;YAC5B,qFAAqF;QACzF,CAAC;QAqBL,aAAC;IAAD,CAAC,AA/GD,IA+GC;IA/GY,YAAM,SA+GlB,CAAA;AACL,CAAC,EAjHS,KAAK,KAAL,KAAK,QAiHd;ACjHD,IAAU,KAAK,CAgDd;AAhDD,WAAU,KAAK;IACX;QAGI,gBAAY,GAAU;YADtB,oBAAe,GAAW,CAAC,CAAC;YAK5B,qBAAgB,GAAG;gBACf,IAAM,cAAc,GAAG;oBACnB,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE;oBAChC,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE;oBAClC,EAAE,KAAK,EAAE,eAAe,EAAE,KAAK,EAAE,MAAM,EAAE;oBACzC,EAAE,KAAK,EAAE,eAAe,EAAE,KAAK,EAAE,MAAM,EAAE;oBACzC,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE;iBACrC,CAAC;gBACF,MAAM,CAAC,cAAc,CAAC;YAC1B,CAAC,CAAC;YAEF,aAAQ,GAAG;gBACP,IAAI,KAAK,GAAW,EAAE,CAAC;gBACvB,IAAM,QAAQ,GAAG,CAAC,MAAM,EAAE,QAAQ,EAAE,eAAe,EAAE,iBAAiB,EAAE,QAAQ,CAAC,CAAC;gBAElF,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,eAAe,EAAE,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,GAAG,MAAM,GAAG,CAAC;oBACvF,IAAI,iBAAiB,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC;oBACpF,EAAE,CAAC,CAAC,iBAAiB,IAAI,CAAC,CAAC,CAAC,CAAC;wBACzB,IAAM,cAAc,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;wBAC/C,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;wBACzB,KAAK,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC,KAAK,CAAC;4BAC1C,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC,KAAK,CAAC,CAAC;wBAC3D,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC;oBAC7B,CAAC;oBACD,CAAC,EAAE,CAAC;gBACR,CAAC;gBACD,MAAM,CAAC,KAAK,CAAC;YACjB,CAAC,CAAC;YAEF,aAAQ,GAAG,UAAU,IAAI;gBACrB,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;oBACX,KAAK,MAAM;wBACP,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;wBAC7D,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;oBAC5C,KAAK,MAAM;wBACP,MAAM,CAAC,IAAI,CAAC;oBAChB,QAAQ;gBACZ,CAAC;YACL,CAAC,CAAC;YAzCE,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC;QACtB,CAAC;QAyCL,aAAC;IAAD,CAAC,AA9CD,IA8CC;IA9CY,YAAM,SA8ClB,CAAA;AACL,CAAC,EAhDS,KAAK,KAAL,KAAK,QAgDd;AChDD,IAAU,KAAK,CA6Cd;AA7CD,WAAU,KAAK;IACX;QAGI,oBAAY,GAAU;YADtB,oBAAe,GAAW,CAAC,CAAC;YAK5B,qBAAgB,GAAG;gBACf,IAAM,cAAc,GAAG;oBACnB,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE;oBAChC,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE;iBACrC,CAAC;gBACF,MAAM,CAAC,cAAc,CAAC;YAC1B,CAAC,CAAC;YAEF,aAAQ,GAAG;gBACP,IAAI,KAAK,GAAW,EAAE,CAAC;gBACvB,IAAM,QAAQ,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;gBAEpC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,eAAe,EAAE,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,GAAG,MAAM,GAAG,CAAC;oBACvF,IAAI,iBAAiB,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC;oBACpF,EAAE,CAAC,CAAC,iBAAiB,IAAI,CAAC,CAAC,CAAC,CAAC;wBACzB,IAAM,cAAc,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;wBAC/C,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;wBACzB,KAAK,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC,KAAK,CAAC;4BAC1C,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC,KAAK,CAAC,CAAC;wBAC3D,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC;oBAC7B,CAAC;oBACD,CAAC,EAAE,CAAC;gBACR,CAAC;gBACD,MAAM,CAAC,KAAK,CAAC;YACjB,CAAC,CAAC;YAEF,aAAQ,GAAG,UAAU,IAAI;gBACrB,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;oBACX,KAAK,MAAM;wBACP,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;wBAC7D,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;oBAC5C,KAAK,MAAM;wBACP,MAAM,CAAC,IAAI,CAAC;oBAChB,QAAQ;gBACZ,CAAC;YACL,CAAC,CAAC;YAtCE,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC;QACtB,CAAC;QAsCL,iBAAC;IAAD,CAAC,AA3CD,IA2CC;IA3CY,gBAAU,aA2CtB,CAAA;AACL,CAAC,EA7CS,KAAK,KAAL,KAAK,QA6Cd;AC7CD,IAAU,KAAK,CAuDd;AAvDD,WAAU,KAAK;IACX;QAGI,eAAY,GAAU;YADtB,oBAAe,GAAW,CAAC,CAAC;YAK5B,oBAAe,GAAG,UAAU,KAAK;gBAC7B,IAAM,cAAc,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;gBAC5D,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;YACjC,CAAC,CAAC;YAEF,aAAQ,GAAG;gBACP,IAAI,KAAK,GAAW,EAAE,EAClB,QAAQ,GAAG,EAAE,CAAC;gBAClB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,eAAe,EAAE,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,GAAG,MAAM,GAAG,CAAC;oBACvF,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;oBACxC,MAAM,CAAC,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;wBAC1B,KAAK,KAAK;4BACN,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;4BACxD,KAAK,CAAC;wBACV,KAAK,IAAI;4BACL,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;4BAC3D,KAAK,CAAC;wBACV;4BACI,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;oBAC9D,CAAC;oBACD,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC;gBAC7B,CAAC;gBACD,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;oBACnC,KAAK,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC;gBAC3B,CAAC;gBACD,MAAM,CAAC,KAAK,CAAC;YAEjB,CAAC,CAAC;YAEF,aAAQ,GAAG,UAAU,KAAK;gBACtB,IAAM,QAAQ,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;gBACtD,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,KAAK,CAAC,EACzC,iBAAiB,GAAG,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC;gBAC9D,EAAE,CAAC,CAAC,iBAAiB,IAAI,CAAC,CAAC,CAAC,CAAC;oBACzB,KAAK,GAAG,EAAE,CAAC;oBACX,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC;wBAC1C,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;oBAC/D,IAAI,CAAC,eAAe,GAAG,KAAK,GAAG,CAAC,CAAC;oBACjC,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBACD,IAAI,CAAC,CAAC;oBACF,IAAI,CAAC,eAAe,GAAG,KAAK,GAAG,CAAC,CAAC;oBACjC,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC5C,CAAC;YAEL,CAAC,CAAC;YAhDE,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC;QACtB,CAAC;QAgDL,YAAC;IAAD,CAAC,AArDD,IAqDC;IArDY,WAAK,QAqDjB,CAAA;AACL,CAAC,EAvDS,KAAK,KAAL,KAAK,QAuDd;ACvDD,IAAU,KAAK,CAwFd;AAxFD,WAAU,KAAK;IACX;QAGI,gBAAY,GAAU;YADtB,oBAAe,GAAW,CAAC,CAAC;YAK5B,qBAAgB,GAAG;gBACf,IAAM,cAAc,GAAG;oBACnB,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE;oBAChC,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,UAAU,EAAE;oBACrC,EAAE,KAAK,EAAE,YAAY,EAAE,KAAK,EAAE,MAAM,EAAE;oBACtC,EAAE,KAAK,EAAE,YAAY,EAAE,KAAK,EAAE,MAAM,EAAE;oBACtC,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,aAAa,EAAE;oBACxC,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,aAAa,EAAE;oBACvC,EAAE,KAAK,EAAE,UAAU,EAAE,KAAK,EAAE,MAAM,EAAE;oBACpC,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,YAAY,EAAE;oBACvC,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE;oBAC/B,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE;oBAC/B,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE;oBACjC,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE;oBAC/B,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE;oBAC/B,EAAE,KAAK,EAAE,SAAS,EAAE,KAAK,EAAE,YAAY,EAAE;iBAC5C,CAAC;gBACF,MAAM,CAAC,cAAc,CAAC;YAC1B,CAAC,CAAC;YAEF,aAAQ,GAAG;gBACP,IAAI,KAAK,GAAW,EAAE,CAAC;gBACvB,IAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;gBAEpC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,eAAe,EAAE,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,GAAG,MAAM,GAAG,CAAC;oBACvF,IAAI,iBAAiB,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC;oBACpF,EAAE,CAAC,CAAC,iBAAiB,IAAI,CAAC,CAAC,CAAC,CAAC;wBACzB,IAAM,cAAc,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;wBAC/C,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;wBACzB,KAAK,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC,KAAK,CAAC;4BAC1C,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC,KAAK,CAAC,CAAC;wBAC3D,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC;oBAC7B,CAAC;oBACD,CAAC,EAAE,CAAC;gBACR,CAAC;gBACD,MAAM,CAAC,KAAK,CAAC;YACjB,CAAC,CAAC;YAEM,gBAAW,GAAG;gBAClB,IAAM,QAAQ,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,YAAY,EAAE,aAAa,EAAE,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,KAAK;oBACvG,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;gBAC3C,MAAM,CAAC,QAAQ,CAAC;YACpB,CAAC,CAAC;YAEM,aAAQ,GAAG;gBACf,EAAE,IAAI,CAAC,eAAe,CAAC;gBACvB,IAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;gBACpC,IAAI,WAAW,GAAG,EAAE,CAAC;gBACrB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,eAAe,EAAE,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,GAAG,MAAM,GAAG,CAAC;oBACvF,IAAI,iBAAiB,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC;oBACpF,EAAE,CAAC,CAAC,iBAAiB,IAAI,CAAC,CAAC,CAAC,CAAC;wBACzB,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBAChF,KAAK,CAAC;oBACV,CAAC;oBACD,CAAC,EAAE,CAAC;gBACR,CAAC;gBACD,EAAE,CAAC,CAAC,WAAW,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;oBAC3B,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY;wBAClC,KAAK,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBAC/E,CAAC;gBACD,IAAI,GAAG,GAAG,IAAI,MAAA,KAAK,CAAC,WAAW,CAAC,CAAC;gBACjC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;gBAC9D,MAAM,CAAC,IAAI,MAAA,KAAK,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;YACrC,CAAC,CAAC;YAEM,aAAQ,GAAG,UAAU,IAAI;gBAC7B,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;oBACX,KAAK,MAAM;wBACP,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;wBAC7D,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;oBAC5C,KAAK,MAAM;wBACP,MAAM,CAAC,IAAI,CAAC;oBAChB,KAAK,aAAa;wBACd,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;wBAC7D,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;oBACzB;wBACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;gBAC5B,CAAC;YACL,CAAC,CAAC;YAjFE,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC;QACtB,CAAC;QAiFL,aAAC;IAAD,CAAC,AAtFD,IAsFC;IAtFY,YAAM,SAsFlB,CAAA;AACL,CAAC,EAxFS,KAAK,KAAL,KAAK,QAwFd;ACxFD,IAAU,KAAK,CAyEd;AAzED,WAAU,KAAK;IACX;QAII;YAHA,gBAAW,GAAY,KAAK,CAAC;YAmB7B,kBAAa,GAAG;gBACZ,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;YAC5B,CAAC,CAAC;YAEF,oBAAe,GAAG,UAAU,GAAU;gBAClC,IAAI,aAAa,CAAC;gBAClB,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;oBACf,KAAK,QAAQ;wBACT,aAAa,GAAG,IAAI,MAAA,MAAM,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;wBAC3C,KAAK,CAAC;oBACV,KAAK,QAAQ;wBACT,aAAa,GAAG,IAAI,MAAA,MAAM,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;wBAC3C,KAAK,CAAC;oBACV,KAAK,YAAY,CAAC;oBAClB,KAAK,aAAa;wBACd,GAAG,CAAC,IAAI,GAAG,YAAY,CAAC;wBACxB,aAAa,GAAG,IAAI,MAAA,UAAU,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;wBAC/C,KAAK,CAAC;oBACV,KAAK,QAAQ;wBACT,aAAa,GAAG,IAAI,MAAA,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC;wBACxC,KAAK,CAAC;gBACd,CAAC;gBACD,MAAM,CAAC,aAAa,CAAC;YACzB,CAAC,CAAC;YAEF,QAAG,GAAG,UAAU,GAAU;gBACtB,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC;oBACxB,IAAI,IAAI,GAAG,IAAI,CAAC;oBAChB,IAAM,IAAE,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;oBACrC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAU,OAAO,EAAE,MAAM;wBACxC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,IAAE,CAAC,IAAI,EAAE,UAAU,OAAO;4BACnD,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gCACV,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAE,CAAC,IAAI,CAAC,CAAC;4BACrC,CAAC;4BACD,IAAI,CAAC,CAAC;gCACF,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAE,CAAC,CAAC;4BAClC,CAAC;4BACD,OAAO,EAAE,CAAC;wBACd,CAAC,EAAE,UAAU,GAAmB;4BAC5B,MAAM,CAAC,GAAG,CAAC,CAAC;4BACZ,MAAM,GAAG,CAAC;wBACd,CAAC,CAAC,CAAC;oBACP,CAAC,CAAC,CAAC;gBACP,CAAC;gBACD,IAAI,CAAC,CAAC;oBACF,IAAI,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;oBAC9C,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,aAAa,CAAC,CAAC;gBACrD,CAAC;gBAED,kEAAkE;YACtE,CAAC,CAAC;YAjEE,EAAE,CAAC,CAAC,OAAO,OAAO,KAAK,WAAW,CAAC,CAAC,CAAC;gBACjC,IAAI,MAAA,KAAK,CAAC,MAAA,MAAM,CAAC,gBAAgB,CAAC,CAAC,KAAK,EAAE,CAAC;YAC/C,CAAC;YACD,IAAI,CAAC,CAAC;gBACF,IAAI,CAAC,WAAW,GAAG,IAAI,OAAO,CAAC,QAAQ,EAAE,CAAC;gBAC1C,qBAAqB;gBACrB,iDAAiD;gBACjD,sDAAsD;gBACtD,IAAI;gBACJ,SAAS;gBACT,8CAA8C;gBAC9C,IAAI;YACR,CAAC;QACL,CAAC;QAqDL,eAAC;IAAD,CAAC,AAvED,IAuEC;IAvEY,cAAQ,WAuEpB,CAAA;AACL,CAAC,EAzES,KAAK,KAAL,KAAK,QAyEd;ACzED,IAAU,KAAK,CAgBd;AAhBD,WAAU,KAAK;IAMX,IAAiB,KAAK,CASrB;IATD,WAAiB,KAAK;QAClB;YAGI,aAAY,GAAW,EAAE,KAAK;gBAC1B,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;gBAChB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACxB,CAAC;YACL,UAAC;QAAD,CAAC,AAPD,IAOC;QAPY,SAAG,MAOf,CAAA;IACL,CAAC,EATgB,KAAK,GAAL,WAAK,KAAL,WAAK,QASrB;AACL,CAAC,EAhBS,KAAK,KAAL,KAAK,QAgBd","sourcesContent":["/**\r\n * Project: SqlJs - https://github.com/ujjwalguptaofficial/sqljs\r\n * Author: Ujjwal Gupta \r\n * License: MIT\r\n */","namespace SqlJs {\r\n    export enum Errors {\r\n        JsStoreUndefined = \"Jstore_undefined\",\r\n        UndefinedCon = \"undefined_connection\",\r\n        Undefined = \"undefined\"\r\n    }\r\n\r\n    export interface IError {\r\n        _type: Errors;\r\n        _message: string;\r\n    }\r\n\r\n    export class Error implements IError {\r\n        _type: Errors;\r\n        _message: string;\r\n        _info: any;\r\n        constructor(type: Errors, info: any = null) {\r\n            this._type = type;\r\n            this._info = info;\r\n        }\r\n\r\n        public throw = function () {\r\n            throw this.get();\r\n        };\r\n\r\n        print = function (isWarn: boolean = false) {\r\n            var error_obj = this.get();\r\n            if (isWarn) {\r\n                console.warn(error_obj);\r\n            }\r\n            else {\r\n                console.error(error_obj);\r\n            }\r\n        };\r\n\r\n        private get = function () {\r\n            var error_obj = {\r\n                _type: this._type,\r\n                _message: this._message\r\n            } as IError;\r\n\r\n            switch (this._type) {\r\n                case Errors.UndefinedCon:\r\n                    error_obj._message = \"jsstore connection is not defined\";\r\n                    break;\r\n                case Errors.JsStoreUndefined:\r\n                    error_obj._message = \"jsstore is not defined\";\r\n                    break;\r\n                default:\r\n                    error_obj._message = 'the error type is not defined';\r\n                    break;\r\n            }\r\n            return error_obj;\r\n        };\r\n    }\r\n}","namespace SqlJs {\r\n    export class Query {\r\n        _stringQry: string;\r\n        _maps: IMap[] = [];\r\n        _api: string;\r\n        _splittedQry: string[];\r\n        constructor(qry: string) {\r\n            this._stringQry = qry.replace(/(\\r\\n|\\n|\\r)/gm, \"\");\r\n            this._splittedQry = this.splitQuery();\r\n            this._api = this._splittedQry[0].toLowerCase();\r\n        }\r\n\r\n        getMappedValues = function (keys) {\r\n            var mapped_value = [];\r\n            this._maps.forEach(element => {\r\n                if (keys.indexOf(element._key.toLowerCase()) >= 0) {\r\n                    mapped_value.push(element);\r\n                }\r\n            });\r\n            return mapped_value;\r\n        };\r\n\r\n        getMappedKeys = function () {\r\n            var keys = [];\r\n            this._splittedQry.forEach(element => {\r\n                if (element.indexOf('@') >= 0) {\r\n                    keys.push(element);\r\n                }\r\n            });\r\n            return keys;\r\n        };\r\n\r\n        getMapValue = function (key) {\r\n            if (key.indexOf(\"@\") >= 0) {\r\n                var is_value_exist = false;\r\n                for (var i = 0, length = this._maps.length; i < length; i++) {\r\n                    if (this._maps[i]._key.toLowerCase() === key) {\r\n                        is_value_exist = true;\r\n                        return this._maps[i]._value;\r\n                    }\r\n                }\r\n                if (is_value_exist === false) {\r\n                    console.error('key does not have any value');\r\n                }\r\n            }\r\n            else {\r\n                return key;\r\n            }\r\n        };\r\n\r\n        map = function (key, value) {\r\n            this._maps.push(new Model.Map(key, value));\r\n        };\r\n\r\n        mapMany = function (mapsData: IMap[]) {\r\n            mapsData.forEach(function (item) {\r\n                this._maps.push(new Model.Map(item._key, item._value));\r\n            }, this);\r\n        };\r\n\r\n        private splitQuery = function () {\r\n            var splitted_qry = this._stringQry.replace(\"(\", \" ( \").replace(/  +/g, ' ').\r\n                replace(/(\\w+)\\s*=\\s*(\\w+)/g, '$1 $2').split(\" \");\r\n            return splitted_qry.filter(function (item) {\r\n                return !JsStore.isNull(item);\r\n            });\r\n            // .replace(\"=\", \" \").replace(\"(\",\" \")\r\n        };\r\n\r\n    }\r\n}","namespace SqlJs {\r\n    export class Column {\r\n        _query: Query;\r\n        _index_for_loop: number = 0;\r\n        constructor(qry: Query) {\r\n            this._query = qry;\r\n        }\r\n\r\n        getKeyWordsValue = function () {\r\n            const keywords_value = [\r\n                { value: 'PrimaryKey', rules: 'true' },\r\n                { value: 'PrimaryKey', rules: 'true' },\r\n                { value: 'PrimaryKey', rules: 'true' },\r\n                { value: 'NotNull', rules: 'true' },\r\n                { value: 'NotNull', rules: 'true' },\r\n                { value: 'AutoIncrement', rules: 'true' },\r\n                { value: 'AutoIncrement', rules: 'true' },\r\n                { value: 'Unique', rules: 'true' },\r\n                { value: 'Default', rules: 'next' },\r\n                { value: 'string', rules: 'true' },\r\n                { value: 'boolean', rules: 'true' },\r\n                { value: 'object', rules: 'true' },\r\n                { value: 'number', rules: 'true' }\r\n            ];\r\n            return keywords_value;\r\n        };\r\n\r\n        getQuery = function () {\r\n            var query: object = {\r\n                // Name: this._query._splittedQry[this._index_for_loop++]\r\n                Name: this.getName()\r\n            };\r\n            const keywords = ['primary_key', 'pk', 'primarykey', 'not_null', 'notnull',\r\n                'autoincrement', 'auto_increment', 'unique', 'default', 'string', 'boolean', 'object', 'number'];\r\n            for (var i = this._index_for_loop, length = this._query._splittedQry.length; i < length;) {\r\n                var index_of_keywords = keywords.indexOf(this._query._splittedQry[i].toLowerCase());\r\n                if (index_of_keywords >= 0) {\r\n                    const keywords_value = this.getKeyWordsValue();\r\n                    this._index_for_loop = i;\r\n                    query[keywords_value[index_of_keywords].value] =\r\n                        this.getValue(keywords_value[index_of_keywords].rules);\r\n                    i = this._index_for_loop;\r\n                }\r\n                i++;\r\n            }\r\n            const data_type = ['string', 'boolean', 'object', 'number'];\r\n            for (var prop in query) {\r\n                if (data_type.indexOf(prop) >= 0) {\r\n                    query['DataType'] = prop;\r\n                }\r\n            }\r\n            return query;\r\n        };\r\n\r\n        private getValue = function (rule) {\r\n            switch (rule) {\r\n                case 'next':\r\n                    var value = this._query._splittedQry[++this._index_for_loop];\r\n                    return (this._query.getMapValue(value));\r\n                case 'true':\r\n                    return true;\r\n                default:\r\n            }\r\n        };\r\n\r\n        private getName() {\r\n            return this._query._splittedQry[this._index_for_loop + 1].indexOf('@') >= 0 ?\r\n                this._query.getMapValue(this._query._splittedQry[++this._index_for_loop]) :\r\n                this._query._splittedQry[this._index_for_loop];\r\n            // var value = this._query._splittedQry[this._index_for_loop];\r\n            // return value === 'name' ? \r\n            // this._query.getMapValue(this._query._splittedQry[++this._index_for_loop]) : value;\r\n        }\r\n    }\r\n}","namespace SqlJs {\r\n    export class Create {\r\n        _query: Query;\r\n        _index_for_loop: number = 0;\r\n        constructor(qry: Query) {\r\n            this._query = qry;\r\n        }\r\n\r\n        getDb = function () {\r\n            const queries = this._query._stringQry.split(\";\");\r\n            var database, tables = [];\r\n            queries.forEach(function (item) {\r\n                if (item.length > 0) {\r\n                    var query = new Query(item);\r\n                    var keys = query.getMappedKeys();\r\n                    if (keys.length > 0) {\r\n                        var values = this._query.getMappedValues(keys);\r\n                        if (values.length === keys.length) {\r\n                            values.forEach((value) => {\r\n                                query.map(value._key, value._value);\r\n                            });\r\n                        }\r\n                    }\r\n                    if (query._stringQry.indexOf('table') >= 0) {\r\n                        tables.push(new Create(query).getQuery());\r\n                    }\r\n                    else {\r\n                        database = new Create(query).getQuery();\r\n                    }\r\n                }\r\n            }, this);\r\n            database.Tables = tables;\r\n            return database;\r\n        };\r\n\r\n        private getKeyWordsValue = function () {\r\n            const keywords_value = [\r\n                { value: 'Name', rules: 'getName' },\r\n                { value: 'Name', rules: 'getName' },\r\n                { value: 'Columns', rules: 'getColumns' }\r\n            ];\r\n            return keywords_value;\r\n        };\r\n\r\n        private getIndexofColumnQuery = function () {\r\n            var index = 0;\r\n            for (var j = this._index_for_loop, length = this._query._stringQry.length;\r\n                (j > 0 && index < length); index++) {\r\n                if (this._query._stringQry[index] === \" \") {\r\n                    j--;\r\n                }\r\n            }\r\n            return index;\r\n        };\r\n\r\n        private getColumns = function () {\r\n            var column_query = this._query._stringQry.substr(this.getIndexofColumnQuery()).\r\n                replace(/[()]/g, '').split(','),\r\n                columns = [];\r\n            column_query.forEach(function (item: string) {\r\n                if (item.length > 0) {\r\n                    const query = new Query(item);\r\n                    columns.push(new Column(query).getQuery());\r\n                }\r\n            });\r\n            return columns;\r\n        };\r\n\r\n        private getValue = function (rule) {\r\n            switch (rule) {\r\n                case 'getName':\r\n                    return this.getName();\r\n                case 'next':\r\n                    var value = this._query._splittedQry[++this._index_for_loop];\r\n                    return (this._query.getMapValue(value));\r\n                case 'getColumns':\r\n                    var value = this.getColumns();\r\n                    this._index_for_loop = this._query._splittedQry.length;\r\n                    return value;\r\n                default:\r\n            }\r\n        };\r\n\r\n        private getName() {\r\n            var value = this._query._splittedQry[++this._index_for_loop];\r\n            return this._index_for_loop + 1 < this._query._splittedQry.length &&\r\n                this._query._splittedQry[this._index_for_loop + 1].indexOf('@') >= 0 ?\r\n                this._query.getMapValue(this._query._splittedQry[++this._index_for_loop]) : value;\r\n            // this._query._splittedQry[this._index_for_loop];\r\n            // return value === 'name' ?\r\n            // this._query.getMapValue(this._query._splittedQry[++this._index_for_loop]) : value;\r\n        }\r\n\r\n        private getQuery = function () {\r\n            var query: object = {};\r\n            const keywords = ['database', 'table', '('];\r\n\r\n            for (var i = this._index_for_loop, length = this._query._splittedQry.length; i < length;) {\r\n                var index_of_keywords = keywords.indexOf(this._query._splittedQry[i].toLowerCase());\r\n                if (index_of_keywords >= 0) {\r\n                    const keywords_value = this.getKeyWordsValue();\r\n                    this._index_for_loop = i;\r\n                    query[keywords_value[index_of_keywords].value] =\r\n                        this.getValue(keywords_value[index_of_keywords].rules);\r\n                    i = this._index_for_loop;\r\n                }\r\n                i++;\r\n            }\r\n            return query;\r\n\r\n        };\r\n\r\n    }\r\n}","namespace SqlJs {\r\n    export class Insert {\r\n        _query: Query;\r\n        _index_for_loop: number = 0;\r\n        constructor(qry: Query) {\r\n            this._query = qry;\r\n        }\r\n\r\n        getKeyWordsValue = function () {\r\n            const keywords_value = [\r\n                { value: 'Into', rules: 'next' },\r\n                { value: 'Values', rules: 'next' },\r\n                { value: 'SkipDataCheck', rules: 'true' },\r\n                { value: 'SkipDataCheck', rules: 'true' },\r\n                { value: 'Return', rules: 'true' }\r\n            ];\r\n            return keywords_value;\r\n        };\r\n\r\n        getQuery = function () {\r\n            var query: object = {};\r\n            const keywords = ['into', 'values', 'skipdatacheck', 'skip_data_check', 'return'];\r\n\r\n            for (var i = this._index_for_loop, length = this._query._splittedQry.length; i < length;) {\r\n                var index_of_keywords = keywords.indexOf(this._query._splittedQry[i].toLowerCase());\r\n                if (index_of_keywords >= 0) {\r\n                    const keywords_value = this.getKeyWordsValue();\r\n                    this._index_for_loop = i;\r\n                    query[keywords_value[index_of_keywords].value] =\r\n                        this.getValue(keywords_value[index_of_keywords].rules);\r\n                    i = this._index_for_loop;\r\n                }\r\n                i++;\r\n            }\r\n            return query;\r\n        };\r\n\r\n        getValue = function (rule) {\r\n            switch (rule) {\r\n                case 'next':\r\n                    var value = this._query._splittedQry[++this._index_for_loop];\r\n                    return (this._query.getMapValue(value));\r\n                case 'true':\r\n                    return true;\r\n                default:\r\n            }\r\n        };\r\n    }\r\n}","namespace SqlJs {\r\n    export class BulkInsert {\r\n        _query: Query;\r\n        _index_for_loop: number = 0;\r\n        constructor(qry: Query) {\r\n            this._query = qry;\r\n        }\r\n\r\n        getKeyWordsValue = function () {\r\n            const keywords_value = [\r\n                { value: 'Into', rules: 'next' },\r\n                { value: 'Values', rules: 'next' }\r\n            ];\r\n            return keywords_value;\r\n        };\r\n\r\n        getQuery = function () {\r\n            var query: object = {};\r\n            const keywords = ['into', 'values'];\r\n\r\n            for (var i = this._index_for_loop, length = this._query._splittedQry.length; i < length;) {\r\n                var index_of_keywords = keywords.indexOf(this._query._splittedQry[i].toLowerCase());\r\n                if (index_of_keywords >= 0) {\r\n                    const keywords_value = this.getKeyWordsValue();\r\n                    this._index_for_loop = i;\r\n                    query[keywords_value[index_of_keywords].value] =\r\n                        this.getValue(keywords_value[index_of_keywords].rules);\r\n                    i = this._index_for_loop;\r\n                }\r\n                i++;\r\n            }\r\n            return query;\r\n        };\r\n\r\n        getValue = function (rule) {\r\n            switch (rule) {\r\n                case 'next':\r\n                    var value = this._query._splittedQry[++this._index_for_loop];\r\n                    return (this._query.getMapValue(value));\r\n                case 'true':\r\n                    return true;\r\n                default:\r\n            }\r\n        };\r\n    }\r\n}","namespace SqlJs {\r\n    export class Where {\r\n        _query: Query;\r\n        _index_for_loop: number = 0;\r\n        constructor(qry: Query) {\r\n            this._query = qry;\r\n        }\r\n\r\n        getKeyWordValue = function (index) {\r\n            const keywords_value = ['Like', 'In', '>', '<', '>=', '<='];\r\n            return keywords_value[index];\r\n        };\r\n\r\n        getQuery = function () {\r\n            var query: object = {},\r\n                or_query = {};\r\n            for (var i = this._index_for_loop, length = this._query._splittedQry.length; i < length;) {\r\n                var value = this._query._splittedQry[i];\r\n                switch (value.toLowerCase()) {\r\n                    case 'and':\r\n                        query[this._query._splittedQry[++i]] = this.getValue(i);\r\n                        break;\r\n                    case 'or':\r\n                        or_query[this._query._splittedQry[++i]] = this.getValue(i);\r\n                        break;\r\n                    default:\r\n                        query[this._query._splittedQry[i]] = this.getValue(i);\r\n                }\r\n                i = this._index_for_loop;\r\n            }\r\n            if (Object.keys(or_query).length > 0) {\r\n                query['Or'] = or_query;\r\n            }\r\n            return query;\r\n\r\n        };\r\n\r\n        getValue = function (index) {\r\n            const keywords = ['like', 'in', '>', '<', '>=', '<='];\r\n            var value = this._query._splittedQry[++index],\r\n                index_of_keywords = keywords.indexOf(value.toLowerCase());\r\n            if (index_of_keywords >= 0) {\r\n                value = {};\r\n                value[this.getKeyWordValue(index_of_keywords)] =\r\n                    this._query.getMapValue(this._query._splittedQry[++index]);\r\n                this._index_for_loop = index + 1;\r\n                return value;\r\n            }\r\n            else {\r\n                this._index_for_loop = index + 1;\r\n                return (this._query.getMapValue(value));\r\n            }\r\n\r\n        };\r\n    }\r\n}","namespace SqlJs {\r\n    export class Select {\r\n        _query: Query;\r\n        _index_for_loop: number = 0;\r\n        constructor(qry: Query) {\r\n            this._query = qry;\r\n        }\r\n\r\n        getKeyWordsValue = function () {\r\n            const keywords_value = [\r\n                { value: 'From', rules: 'next' },\r\n                { value: 'Where', rules: 'getWhere' },\r\n                { value: 'IgnoreCase', rules: 'true' },\r\n                { value: 'IgnoreCase', rules: 'true' },\r\n                { value: 'Limit', rules: 'next_number' },\r\n                { value: 'Skip', rules: 'next_number' },\r\n                { value: 'Distinct', rules: 'true' },\r\n                { value: 'Order', rules: 'getOrderBy' },\r\n                { value: 'Min', rules: 'next' },\r\n                { value: 'Max', rules: 'next' },\r\n                { value: 'Count', rules: 'next' },\r\n                { value: 'Sum', rules: 'next' },\r\n                { value: 'Avg', rules: 'next' },\r\n                { value: 'GroupBy', rules: 'getGroupBy' }\r\n            ];\r\n            return keywords_value;\r\n        };\r\n\r\n        getQuery = function () {\r\n            var query: object = {};\r\n            const keywords = this.getKeyWords();\r\n\r\n            for (var i = this._index_for_loop, length = this._query._splittedQry.length; i < length;) {\r\n                var index_of_keywords = keywords.indexOf(this._query._splittedQry[i].toLowerCase());\r\n                if (index_of_keywords >= 0) {\r\n                    const keywords_value = this.getKeyWordsValue();\r\n                    this._index_for_loop = i;\r\n                    query[keywords_value[index_of_keywords].value] =\r\n                        this.getValue(keywords_value[index_of_keywords].rules);\r\n                    i = this._index_for_loop;\r\n                }\r\n                i++;\r\n            }\r\n            return query;\r\n        };\r\n\r\n        private getKeyWords = function () {\r\n            const keywords = ['from', 'where', 'ignorecase', 'ignore_case', 'limit', 'skip', 'distinct', 'order', 'min',\r\n                'max', 'count', 'sum', 'avg', 'group'];\r\n            return keywords;\r\n        };\r\n\r\n        private getWhere = function () {\r\n            ++this._index_for_loop;\r\n            const keywords = this.getKeyWords();\r\n            var where_query = \"\";\r\n            for (var j = this._index_for_loop, length = this._query._splittedQry.length; j < length;) {\r\n                var index_of_keywords = keywords.indexOf(this._query._splittedQry[j].toLowerCase());\r\n                if (index_of_keywords >= 0) {\r\n                    where_query = this._query._splittedQry.slice(this._index_for_loop, j).join(\" \");\r\n                    break;\r\n                }\r\n                j++;\r\n            }\r\n            if (where_query.length === 0) {\r\n                where_query = this._query._splittedQry.\r\n                    slice(this._index_for_loop, this._query._splittedQry.length).join(\" \");\r\n            }\r\n            var qry = new Query(where_query);\r\n            qry.mapMany(this._query.getMappedValues(qry.getMappedKeys()));\r\n            return new Where(qry).getQuery();\r\n        };\r\n\r\n        private getValue = function (rule) {\r\n            switch (rule) {\r\n                case 'next':\r\n                    var value = this._query._splittedQry[++this._index_for_loop];\r\n                    return (this._query.getMapValue(value));\r\n                case 'true':\r\n                    return true;\r\n                case 'next_number':\r\n                    var value = this._query._splittedQry[++this._index_for_loop];\r\n                    return Number(value);\r\n                default:\r\n                    return this[rule]();\r\n            }\r\n        };\r\n    }\r\n}","namespace SqlJs {\r\n    export class Instance {\r\n        _isDbOpened: boolean = false;\r\n        _connection: JsStore.Instance;\r\n        _query: Query;\r\n        constructor() {\r\n            if (typeof JsStore === \"undefined\") {\r\n                new Error(Errors.JsStoreUndefined).throw();\r\n            }\r\n            else {\r\n                this._connection = new JsStore.Instance();\r\n                // if (dbSchemaQry) {\r\n                //     this._connection = new JsStore.Instance();\r\n                //     const dbSchema = this.getDbSchema(dbSchemaQry);\r\n                // }\r\n                // else {\r\n                //     new Error(Errors.UndefinedCon).throw();\r\n                // }\r\n            }\r\n        }\r\n\r\n        getConnection = function () {\r\n            return this._connection;\r\n        };\r\n\r\n        getJsStoreQuery = function (qry: Query) {\r\n            var jsstore_query;\r\n            switch (qry._api) {\r\n                case 'select':\r\n                    jsstore_query = new Select(qry).getQuery();\r\n                    break;\r\n                case 'insert':\r\n                    jsstore_query = new Insert(qry).getQuery();\r\n                    break;\r\n                case 'bulkinsert':\r\n                case 'bulk_insert':\r\n                    qry._api = 'bulkInsert';\r\n                    jsstore_query = new BulkInsert(qry).getQuery();\r\n                    break;\r\n                case 'create':\r\n                    jsstore_query = new Create(qry).getDb();\r\n                    break;\r\n            }\r\n            return jsstore_query;\r\n        };\r\n\r\n        run = function (qry: Query) {\r\n            if (qry._api === 'create') {\r\n                var that = this;\r\n                const db = this.getJsStoreQuery(qry);\r\n                return new Promise(function (resolve, reject) {\r\n                    JsStore.isDbExist.call(this, db.Name, function (isExist) {\r\n                        if (isExist) {\r\n                            that._connection.openDb(db.Name);\r\n                        }\r\n                        else {\r\n                            that._connection.createDb(db);\r\n                        }\r\n                        resolve();\r\n                    }, function (err: JsStore.IError) {\r\n                        reject(err);\r\n                        throw err;\r\n                    });\r\n                });\r\n            }\r\n            else {\r\n                var jsstore_query = this.getJsStoreQuery(qry);\r\n                return this._connection[qry._api](jsstore_query);\r\n            }\r\n\r\n            // this._connection[this._api](jsstore_query, onSuccess, onError);\r\n        };\r\n    }\r\n}","namespace SqlJs {\r\n    export interface IMap {\r\n        _key: string;\r\n        _value: any;\r\n    }\r\n\r\n    export namespace Model {\r\n        export class Map implements IMap {\r\n            _key: string;\r\n            _value: any;\r\n            constructor(key: string, value) {\r\n                this._key = key;\r\n                this._value = value;\r\n            }\r\n        }\r\n    }\r\n}"]}